////////////////////////////////////////////////////////////////////////////////////////////
// 						D.Число зверя
// Ограничение по времени : 1000 миллисекунд
// Ограничение по памяти : 65000 кибибайт
//		Василий так же увлекается нумерологией, и однажды прочитав, что сумма квадратов
// первых семи простых чисел(2, 3, 5, 7, 11, 13, 17) равно 666 (число зверя) решил найти
// другие интересные последовательности, суммы квадратов которых равны «красивым»
// числам.Вам требуется помочь Василию, напишите программу, которая будет находить
// суммы квадратов простых чисел из указанного интервала.
//		Входные данные
//	Два целых положительных числа(1 ≤ A ≤ B ≤ 100), записанные через пробел –
// порядковые номера простых чисел в возрастающей последовательности.
//		Выходные данные
// Одно число – сумма квадратов всех простых чисел из указанного интервала.
//		Пример
// Ввод	    Вывод
// 1 7		666
// 3 3		25
// 4 5		170
//		Подсказка:
//	В первом примере первое простое число – 2, второе – 3 и далее 5, 7, 11, 13, 17.
//	2^2 + 3^2 + 5^2 + 7^2 + 11^2 + 13^2 + 17^2 = 666.
//		Первые 100 простых чисел :
// 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101,
// 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197,
// 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311,
// 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431,
// 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541.
/////////////////////////////////////////////////////////////////////////////////////////////////////
#include <iostream>
#include <ios>
using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int a, b;
	cin >> a >> b;
	int max_num = b * b;

	// sieve of eratosthenes
	bool* array = new bool[max_num]; 
	array[0] = false;
	array[1] = false;
	for (int i = 2; i < max_num; i++) {
		array[i] = true;
	}
	for (int i = 2; i * i < max_num; i++) {
		if (array[i]) {
			for (int j = i-1; j*i + i < max_num; j++) {
				array[j*i + i] = false;
			}
		}
	}

	// sum of squares of primes
	ll sum = 0;
	int count = 0;
	for (ll i = 2; count < b; i++) {
		if (array[i]) {
			count++;
			if (count >= a)
				sum += i * i;
		}
	}
	cout << sum;
	return 0;
}
