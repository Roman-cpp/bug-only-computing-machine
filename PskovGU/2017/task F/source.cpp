////////////////////////////////////////////////////////////////////////////////////////////
//					F. Дистанция в простых числах
//			Ограничение по времени : 10000 миллисекунд
//			Ограничение по памяти : 128000 кибибайт
//		Василий знает, что простых чисел(это те, целые положительные числа, которые имеют
//	ровно два делителя : единицу и само себя) бесконечно много, и ему очень нравится их
//	изучать.Василий не очень хороший программист, поэтому он просит Вас разработать
//	программу, которая будет находить количество простых чисел между двумя заданными
//	числами.
//			Входные данные
//	Два целых положительных числа(1 ≤ A ≤ B ≤ 108), записанные через пробел.
//			Выходные данные
//	Количество простых чисел превышающих число A и меньших числа B.
//			Примеры
//		Ввод	Вывод
//		3 7		1
//		1 2		0
//			Подсказка:
//	В первом примере только одно число большее 3 и меньшее 7 является простым – число 5.
/////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <ios>
#include <vector>
using namespace std;
typedef long long ll;

int main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);

	int a = 0; 
	int b = 0;
	cin >> a >> b;

	int max_num = b * b;
	// sieve of eratosthenes
	bool* array = new bool[max_num]; 
	array[0] = false;
	array[1] = false;
	for (int i = 2; i < max_num; i++) {
		array[i] = true;
	}
	for (int i = 2; i * i < max_num; i++) {
		if (array[i]) {
			for (int j = i-1; j*i + i < max_num; j++) {
				array[j*i + i] = false;
			}
		}
	}

	int count = 0;
	// sum of squares of primes
	for (int i = a + 1; i < b; i++) {
		if (array[i]) count++;
	}
	cout << count;
	return 0;
}
